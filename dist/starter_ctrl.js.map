{"version":3,"sources":["../src/starter_ctrl.js"],"names":["MetricsPanelCtrl","_","DateTime","panelDefaults","bgColor","dateSettings","dateFormat","fontSize","fontWeight","StarterCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onDataReceived","onDataError","onDataSnapshotLoad","date","local","toFormat","addEditorTab","dataList","snapshotData","scope","elem","$panelContainer","find","css","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;AACEC,c,aAAAA,Q;;;;;;;;;;;;;;;;;;;;;AAGHC,mB,GAAgB;AACpBC,iBAAS,IADW;AAEpBC,sBAAc;AACZC,sBAAY,YADA;AAEZC,oBAAU,MAFE;AAGZC,sBAAY;AAHA;AAFM,O;;6BASTC,W;;;AACX,6BAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,gIACvBD,MADuB,EACfC,SADe;;AAG7B;AACAV,YAAEW,YAAF,CAAe,MAAKC,KAApB,EAA2BV,aAA3B;;AAEA;AACA;AACA,gBAAKW,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKG,eAAL,CAAqBD,IAArB,OAAjC;;AAEA;AACA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKI,MAAL,CAAYF,IAAZ,OAApC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKK,cAAL,CAAoBH,IAApB,OAAhC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKM,WAAL,CAAiBJ,IAAjB,OAA7B;;AAEA;AACA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKO,kBAAL,CAAwBL,IAAxB,OAArC;;AAEA,gBAAKM,IAAL,GAAYrB,SAASsB,KAAT,GAAiBC,QAAjB,CAA0B,MAAKZ,KAAL,CAAWR,YAAX,CAAwBC,UAAlD,CAAZ;AA3B6B;AA4B9B;;;;2CAEgB;AACf,iBAAKoB,YAAL,CAAkB,SAAlB,EAA6B,kDAA7B,EAAiF,CAAjF;AACD;;;4CAEiB,CACjB;;;yCAEcC,Q,EAAU;AACvB,gBAAI,CAACA,QAAL,EAAe;AAChB;;;wCAEa;AACZ,iBAAKP,cAAL,CAAoB,EAApB;AACD;;;6CAEkBQ,Y,EAAc;AAC/B,iBAAKR,cAAL,CAAoBQ,YAApB;AACD;;;+BAMIC,K,EAAOC,I,EAAM;AAAA;;AAChB,iBAAKhB,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAM;AAC7B,kBAAMgB,kBAAkBD,KAAKE,IAAL,CAAU,kBAAV,CAAxB;;AAEA,kBAAI,OAAKnB,KAAL,CAAWT,OAAf,EAAwB;AACtB2B,gCAAgBE,GAAhB,CAAoB,kBAApB,EAAwC,OAAKpB,KAAL,CAAWT,OAAnD;AACD,eAFD,MAEO;AACL2B,gCAAgBE,GAAhB,CAAoB,kBAApB,EAAwC,EAAxC;AACD;AACF,aARD;AASD;;;;QAhE8BjC,gB;;;;AAmEjCS,kBAAYyB,WAAZ,GAA0B,aAA1B","file":"starter_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport { DateTime } from './lib/luxon';\nimport './css/starter-panel.css!';\n\nconst panelDefaults = {\n  bgColor: null,\n  dateSettings: {\n    dateFormat: 'YYYY-MM-DD',\n    fontSize: '20px',\n    fontWeight: 'normal'\n  },\n};\n\nexport class StarterCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // Set panel defaults for properties that the user has not set explicitly\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    // init-edit-mode event is triggered when the user clicks on edit\n    // the editor tabs are initialized in the handler\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    // The panel-teardown event is useful for cleaning up to avoid memory leaks\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n\n    // The panel initialized event can be useful for panels that inherit PanelCtrl instead of MetricsPanelCtrl\n    // With a MetricsPanelCtrl panel, you usually want to wait for some data to be received\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    // The data-received event is triggered when the datasource returns with data\n    this.events.on('data-received', this.onDataReceived.bind(this));\n\n    // The data-error event can be handled by showing a friendly error message to the user or to ignore the error\n    this.events.on('data-error', this.onDataError.bind(this));\n\n    // The data-snapshot-load event is triggered when the dashboard is loading as a snapshot\n    // Read more about saving and loading snapshot data here:\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    this.date = DateTime.local().toFormat(this.panel.dateSettings.dateFormat);\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-starter-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n  }\n\n  onDataError() {\n    this.onDataReceived([]);\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  /*\n  The link function is an Angular function that can be used to access the HTML element for the panel\n  */\n  /* eslint class-methods-use-this: 0 */\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n    });\n  }\n}\n\nStarterCtrl.templateUrl = 'module.html';\n"]}