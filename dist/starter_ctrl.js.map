{"version":3,"sources":["../src/starter_ctrl.js"],"names":["MetricsPanelCtrl","_","$","TimeSeries","kbn","panelDefaults","bgColor","format","thresholds","colors","colorBackground","colorValue","sparkline","show","lineColor","fillColor","StarterCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onDataReceived","onDataError","onDataSnapshotLoad","onSparklineColorChange","onSparklineFillChange","addEditorTab","unitFormats","getUnitFormats","subItem","value","refresh","dataList","data","map","seriesHandler","seriesData","series","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","stats","formatFunc","valueFormats","valueFormatted","i","length","thresholdColor","getColorForValue","isFinite","first","tmp","panelColorIndex","color","snapshotData","newColor","scope","elem","attrs","ctrl","templateSrv","$panelContainer","find","css","replace","split","Number","strVal","trim","setThresholds","generateHtml","addSparklines","body","bgThresholdColor","valueThresholdColor","starterElem","html","rootElems","setTimeout","addSparkline","rootElem","width","sparkLineElem","empty","plotCanvas","plotCss","height","options","legend","lines","fill","lineWidth","yaxes","xaxis","mode","min","range","from","valueOf","max","to","grid","hoverable","borderWidth","append","plotSeries","plot","templateUrl"],"mappings":"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","file":"starter_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport './css/starter-panel.css!';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nconst panelDefaults = {\r\n  bgColor: null,\r\n  format: 'none',\r\n  thresholds: '',\r\n  colors: ['#299c46', 'rgba(237, 129, 40, 0.89)', '#d44a3a'],\r\n  colorBackground: false,\r\n  colorValue: false,\r\n  sparkline: {\r\n    show: true,\r\n    lineColor: 'rgb(31, 120, 193)',\r\n    fillColor: 'rgba(31, 118, 189, 0.18)',\r\n  },\r\n};\r\n\r\nexport class StarterCtrl extends MetricsPanelCtrl {\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n\r\n    // Set panel defaults for properties that the user has not set explicitly\r\n    _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n    // init-edit-mode event is triggered when the user clicks on edit\r\n    // the editor tabs are initialized in the handler\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n\r\n    // The panel-teardown event is useful for cleaning up to avoid memory leaks\r\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\r\n\r\n    // The panel initialized event can be useful for panels that inherit PanelCtrl instead of MetricsPanelCtrl\r\n    // With a MetricsPanelCtrl panel, you usually want to wait for some data to be received\r\n    this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n    // The data-received event is triggered when the datasource returns with data\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n\r\n    // The data-error event can be handled by showing a friendly error message to the user or to ignore the error\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n\r\n    // The data-snapshot-load event is triggered when the dashboard is loading as a snapshot\r\n    // Read more about saving and loading snapshot data here:\r\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\r\n\r\n    this.onSparklineColorChange = this.onSparklineColorChange.bind(this);\r\n    this.onSparklineFillChange = this.onSparklineFillChange.bind(this);\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Options', 'public/plugins/grafana-starter-panel/editor.html', 2);\r\n    this.unitFormats = kbn.getUnitFormats();\r\n  }\r\n\r\n  setUnitFormat(subItem) {\r\n    this.panel.format = subItem.value;\r\n    this.refresh();\r\n  }\r\n\r\n  onPanelTeardown() {\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    if (!dataList) return;\r\n\r\n    this.data = dataList.map(this.seriesHandler.bind(this));\r\n    this.render();\r\n  }\r\n\r\n  seriesHandler(seriesData) {\r\n    const series = new TimeSeries({\r\n      datapoints: seriesData.datapoints || [],\r\n      alias: seriesData.target,\r\n    });\r\n\r\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\r\n    series.value = series.stats['current'];\r\n    const formatFunc = kbn.valueFormats[this.panel.format];\r\n    series.valueFormatted = formatFunc(series.value, 0, 1);\r\n    return series;\r\n  }\r\n\r\n  setThresholds(thresholds) {\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      this.data[i].thresholdColor = this.getColorForValue(this.data[i].value, thresholds);\r\n    }\r\n  }\r\n\r\n  getColorForValue(value, thresholds) {\r\n    if (!_.isFinite(value)) {\r\n      return null;\r\n    }\r\n    for (let i = thresholds.length; i > 0; i--) {\r\n      if (value >= thresholds[i - 1]) {\r\n        return this.panel.colors[i];\r\n      }\r\n    }\r\n    return _.first(this.panel.colors);\r\n  }\r\n\r\n  invertColorOrder() {\r\n    const tmp = this.panel.colors[0];\r\n    this.panel.colors[0] = this.panel.colors[2];\r\n    this.panel.colors[2] = tmp;\r\n    this.render();\r\n  }\r\n\r\n  onColorChange(panelColorIndex) {\r\n    return color => {\r\n      this.panel.colors[panelColorIndex] = color;\r\n      this.render();\r\n    };\r\n  }\r\n\r\n  onDataError() {\r\n    this.onDataReceived();\r\n  }\r\n\r\n  onDataSnapshotLoad(snapshotData) {\r\n    this.onDataReceived(snapshotData);\r\n  }\r\n\r\n  onSparklineColorChange(newColor) {\r\n    this.panel.sparkline.lineColor = newColor;\r\n    this.render();\r\n  }\r\n\r\n  onSparklineFillChange(newColor) {\r\n    this.panel.sparkline.fillColor = newColor;\r\n    this.render();\r\n  }\r\n\r\n  /*\r\n  The link function is an Angular function that can be used to access the HTML element for the panel\r\n  */\r\n  /* eslint class-methods-use-this: 0 */\r\n  link(scope, elem, attrs, ctrl) {\r\n    let data;\r\n    const templateSrv = this.templateSrv;\r\n\r\n    this.events.on('render', () => {\r\n      const $panelContainer = elem.find('.panel-container');\r\n\r\n      if (this.panel.bgColor) {\r\n        $panelContainer.css('background-color', this.panel.bgColor);\r\n      } else {\r\n        $panelContainer.css('background-color', '');\r\n      }\r\n\r\n      if (!ctrl.data) {\r\n        return;\r\n      }\r\n      data = this.data;\r\n\r\n      const thresholds = templateSrv.replace(this.panel.thresholds || '').split(',').map(strVal => {\r\n        return Number(strVal.trim());\r\n      });\r\n      this.setThresholds(thresholds);\r\n\r\n      generateHtml();\r\n\r\n      addSparklines();\r\n    });\r\n\r\n    function generateHtml() {\r\n      let body = '';\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        const bgThresholdColor = ctrl.panel.colorBackground ? 'background-color: ' + data[i].thresholdColor : '';\r\n        body += `<span class=\"starter-panel-multistat\" style=\"${bgThresholdColor}\">`;\r\n        body += '<span class=\"starter-panel-multistat-value\">';\r\n        body += '<span class=\"starter-panel-multistat-value__text\">' + data[i].alias + '</span>';\r\n        const valueThresholdColor = ctrl.panel.colorValue ? 'color: ' + data[i].thresholdColor : '';\r\n        body += `<span class=\"starter-panel-multistat-value__value\" style=\"${valueThresholdColor}\">${data[i].valueFormatted}</span>`;\r\n        body += '</span>';\r\n        body += '<span class=\"starter-panel-multistat-sparkline\"></span>';\r\n        body += '</span>';\r\n      }\r\n      const starterElem = elem.find('.starter-panel');\r\n      starterElem.html(body);\r\n    }\r\n\r\n    function addSparklines() {\r\n      const rootElems = elem.find('.starter-panel-multistat');\r\n\r\n      if (rootElems.length === 0) {\r\n        // delay sparkline render\r\n        setTimeout(() => addSparklines(), 30);\r\n      }\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        addSparkline(data[i], $(rootElems[i]));\r\n      }\r\n    }\r\n\r\n    function addSparkline(data, rootElem) {\r\n      const width = elem.width() + 20;\r\n      if (width < 30 || rootElem.length === 0) {\r\n        // element has not gotten it's width yet\r\n        return;\r\n      }\r\n      const sparkLineElem = rootElem.find('.starter-panel-multistat-sparkline');\r\n      sparkLineElem.empty();\r\n\r\n      const plotCanvas = $('<div></div>');\r\n      const plotCss = {};\r\n      plotCss.width = (rootElem.width() / 2) + 'px';\r\n      plotCss.height = (rootElem.height() - 20) + 'px';\r\n\r\n      plotCanvas.css(plotCss);\r\n\r\n      const options = {\r\n        legend: { show: false },\r\n        series: {\r\n          lines: {\r\n            show: true,\r\n            fill: 1,\r\n            lineWidth: 1,\r\n            fillColor: ctrl.panel.sparkline.fillColor,\r\n          },\r\n        },\r\n        yaxes: { show: false },\r\n        xaxis: {\r\n          show: false,\r\n          mode: 'time',\r\n          min: ctrl.range.from.valueOf(),\r\n          max: ctrl.range.to.valueOf(),\r\n        },\r\n        grid: { hoverable: false, show: false, borderWidth: 0 },\r\n      };\r\n\r\n      sparkLineElem.append(plotCanvas);\r\n\r\n      const plotSeries = {\r\n        data: data.flotpairs,\r\n        color: ctrl.panel.sparkline.lineColor,\r\n      };\r\n\r\n      $.plot(plotCanvas, [plotSeries], options);\r\n    }\r\n  }\r\n}\r\n\r\nStarterCtrl.templateUrl = 'module.html';\r\n"]}