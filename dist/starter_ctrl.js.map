{"version":3,"sources":["../src/starter_ctrl.js"],"names":["MetricsPanelCtrl","_","$","TimeSeries","kbn","panelDefaults","bgColor","format","sparkline","show","full","lineColor","fillColor","StarterCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onDataReceived","onDataError","onDataSnapshotLoad","onSparklineColorChange","onSparklineFillChange","addEditorTab","unitFormats","getUnitFormats","subItem","value","refresh","dataList","data","map","seriesHandler","seriesData","series","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","stats","formatFunc","valueFormats","valueFormatted","snapshotData","newColor","scope","elem","attrs","ctrl","$panelContainer","find","css","rootElem","addSparklines","width","setTimeout","empty","height","plotCanvas","plotCss","position","bottom","left","dynamicHeightMargin","Math","round","floor","options","legend","lines","fill","lineWidth","yaxes","xaxis","mode","min","range","from","valueOf","max","to","grid","hoverable","append","plotSeries","color","plot","templateUrl"],"mappings":"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","file":"starter_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport './css/starter-panel.css!';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n\nconst panelDefaults = {\n  bgColor: null,\n  format: 'none',\n  sparkline: {\n    show: true,\n    full: false,\n    lineColor: 'rgb(31, 120, 193)',\n    fillColor: 'rgba(31, 118, 189, 0.18)',\n  },\n};\n\nexport class StarterCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // Set panel defaults for properties that the user has not set explicitly\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    // init-edit-mode event is triggered when the user clicks on edit\n    // the editor tabs are initialized in the handler\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    // The panel-teardown event is useful for cleaning up to avoid memory leaks\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n\n    // The panel initialized event can be useful for panels that inherit PanelCtrl instead of MetricsPanelCtrl\n    // With a MetricsPanelCtrl panel, you usually want to wait for some data to be received\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    // The data-received event is triggered when the datasource returns with data\n    this.events.on('data-received', this.onDataReceived.bind(this));\n\n    // The data-error event can be handled by showing a friendly error message to the user or to ignore the error\n    this.events.on('data-error', this.onDataError.bind(this));\n\n    // The data-snapshot-load event is triggered when the dashboard is loading as a snapshot\n    // Read more about saving and loading snapshot data here:\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    this.onSparklineColorChange = this.onSparklineColorChange.bind(this);\n    this.onSparklineFillChange = this.onSparklineFillChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-starter-panel/editor.html', 2);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.refresh();\n  }\n\n  onPanelTeardown() {\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    this.data = dataList.map(this.seriesHandler.bind(this));\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints || [],\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    series.value = series.stats['current'];\n    const formatFunc = kbn.valueFormats[this.panel.format];\n    series.valueFormatted = formatFunc(series.value, 0, 1);\n    return series;\n  }\n\n  onDataError() {\n    this.onDataReceived();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  onSparklineColorChange(newColor) {\n    this.panel.sparkline.lineColor = newColor;\n    this.render();\n  }\n\n  onSparklineFillChange(newColor) {\n    this.panel.sparkline.fillColor = newColor;\n    this.render();\n  }\n\n  /*\n  The link function is an Angular function that can be used to access the HTML element for the panel\n  */\n  /* eslint class-methods-use-this: 0 */\n  link(scope, elem, attrs, ctrl) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n\n      if (!ctrl.data) {\n        return;\n      }\n\n      const rootElem = elem.find('.temp-sparkline');\n\n      addSparklines(rootElem);\n    });\n\n    function addSparklines(rootElem) {\n      const width = elem.width() + 20;\n      if (width < 30) {\n        // element has not gotten it's width yet\n        // delay sparkline render\n        setTimeout(() => addSparklines(rootElem), 30);\n        return;\n      }\n\n      rootElem.empty();\n\n      const height = ctrl.height;\n      const plotCanvas = $('<div></div>');\n      const plotCss = {};\n      plotCss.position = 'absolute';\n\n      if (ctrl.panel.sparkline.full) {\n        plotCss.bottom = '5px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        const dynamicHeightMargin = height <= 100 ? 5 : Math.round(height / 100) * 15 + 5;\n        plotCss.height = height - dynamicHeightMargin + 'px';\n      } else {\n        plotCss.bottom = '0px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        plotCss.height = Math.floor(height * 0.25) + 'px';\n      }\n\n      plotCanvas.css(plotCss);\n\n      const options = {\n        legend: { show: false },\n        series: {\n          lines: {\n            show: true,\n            fill: 1,\n            lineWidth: 1,\n            fillColor: ctrl.panel.sparkline.fillColor,\n          },\n        },\n        yaxes: { show: false },\n        xaxis: {\n          show: false,\n          mode: 'time',\n          min: ctrl.range.from.valueOf(),\n          max: ctrl.range.to.valueOf(),\n        },\n        grid: { hoverable: false, show: false },\n      };\n\n      rootElem.append(plotCanvas);\n\n      const plotSeries = {\n        data: ctrl.data[0].flotpairs,\n        color: ctrl.panel.sparkline.lineColor,\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n  }\n}\n\nStarterCtrl.templateUrl = 'module.html';\n"]}