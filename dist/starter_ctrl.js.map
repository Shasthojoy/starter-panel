{"version":3,"sources":["../src/starter_ctrl.js"],"names":["MetricsPanelCtrl","_","TimeSeries","panelDefaults","bgColor","StarterCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onDataReceived","onDataError","onDataSnapshotLoad","addEditorTab","dataList","series","map","seriesHandler","currentValue","stats","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","snapshotData","scope","elem","$panelContainer","find","css","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;AAEAC,gB;;;;;;;;;;;;;;;;;;;;;AAEDC,mB,GAAgB;AACpBC,iBAAS;AADW,O;;6BAITC,W;;;AACX,6BAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,gIACvBD,MADuB,EACfC,SADe;;AAG7B;AACAN,YAAEO,YAAF,CAAe,MAAKC,KAApB,EAA2BN,aAA3B;;AAEA;AACA;AACA,gBAAKO,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKG,eAAL,CAAqBD,IAArB,OAAjC;;AAEA;AACA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKI,MAAL,CAAYF,IAAZ,OAApC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKK,cAAL,CAAoBH,IAApB,OAAhC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKM,WAAL,CAAiBJ,IAAjB,OAA7B;;AAEA;AACA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKO,kBAAL,CAAwBL,IAAxB,OAArC;AAzB6B;AA0B9B;;;;2CAEgB;AACf,iBAAKM,YAAL,CAAkB,SAAlB,EAA6B,kDAA7B,EAAiF,CAAjF;AACD;;;4CAEiB,CACjB;;;yCAEcC,Q,EAAU;AACvB,gBAAI,CAACA,QAAL,EAAe;;AAEf,gBAAMC,SAASD,SAASE,GAAT,CAAa,KAAKC,aAAL,CAAmBV,IAAnB,CAAwB,IAAxB,CAAb,CAAf;AACA,iBAAKW,YAAL,GAAoBH,OAAO,CAAP,EAAUI,KAAV,CAAgB,SAAhB,CAApB;AACD;;;wCAEaC,U,EAAY;AACxB,gBAAIL,SAAS,IAAInB,UAAJ,CAAe;AAC1ByB,0BAAYD,WAAWC,UAAX,IAAyB,EADX;AAE1BC,qBAAOF,WAAWG;AAFQ,aAAf,CAAb;;AAKAR,mBAAOS,SAAP,GAAmBT,OAAOU,YAAP,CAAoB,KAAKtB,KAAL,CAAWuB,aAA/B,CAAnB;AACA,mBAAOX,MAAP;AACD;;;wCAEa;AACZ,iBAAKL,cAAL;AACD;;;6CAEkBiB,Y,EAAc;AAC/B,iBAAKjB,cAAL,CAAoBiB,YAApB;AACD;;;+BAMIC,K,EAAOC,I,EAAM;AAAA;;AAChB,iBAAKzB,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAM;AAC7B,kBAAMyB,kBAAkBD,KAAKE,IAAL,CAAU,kBAAV,CAAxB;;AAEA,kBAAI,OAAK5B,KAAL,CAAWL,OAAf,EAAwB;AACtBgC,gCAAgBE,GAAhB,CAAoB,kBAApB,EAAwC,OAAK7B,KAAL,CAAWL,OAAnD;AACD,eAFD,MAEO;AACLgC,gCAAgBE,GAAhB,CAAoB,kBAApB,EAAwC,EAAxC;AACD;AACF,aARD;AASD;;;;QA3E8BtC,gB;;;;AA8EjCK,kBAAYkC,WAAZ,GAA0B,aAA1B","file":"starter_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport './css/starter-panel.css!';\nimport TimeSeries from 'app/core/time_series2';\n\nconst panelDefaults = {\n  bgColor: null,\n};\n\nexport class StarterCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // Set panel defaults for properties that the user has not set explicitly\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    // init-edit-mode event is triggered when the user clicks on edit\n    // the editor tabs are initialized in the handler\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    // The panel-teardown event is useful for cleaning up to avoid memory leaks\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n\n    // The panel initialized event can be useful for panels that inherit PanelCtrl instead of MetricsPanelCtrl\n    // With a MetricsPanelCtrl panel, you usually want to wait for some data to be received\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    // The data-received event is triggered when the datasource returns with data\n    this.events.on('data-received', this.onDataReceived.bind(this));\n\n    // The data-error event can be handled by showing a friendly error message to the user or to ignore the error\n    this.events.on('data-error', this.onDataError.bind(this));\n\n    // The data-snapshot-load event is triggered when the dashboard is loading as a snapshot\n    // Read more about saving and loading snapshot data here:\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-starter-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    const series = dataList.map(this.seriesHandler.bind(this));\n    this.currentValue = series[0].stats['current'];\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints || [],\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  onDataError() {\n    this.onDataReceived();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  /*\n  The link function is an Angular function that can be used to access the HTML element for the panel\n  */\n  /* eslint class-methods-use-this: 0 */\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n    });\n  }\n}\n\nStarterCtrl.templateUrl = 'module.html';\n"]}