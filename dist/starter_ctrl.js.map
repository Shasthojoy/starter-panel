{"version":3,"sources":["../src/starter_ctrl.js"],"names":["MetricsPanelCtrl","_","$","TimeSeries","kbn","panelDefaults","bgColor","format","thresholds","colors","colorBackground","colorValue","sparkline","show","lineColor","fillColor","StarterCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onDataReceived","onDataError","onDataSnapshotLoad","onSparklineColorChange","onSparklineFillChange","addEditorTab","unitFormats","getUnitFormats","subItem","value","refresh","dataList","data","map","seriesHandler","seriesData","series","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","stats","formatFunc","valueFormats","valueFormatted","i","length","thresholdColor","getColorForValue","isFinite","first","tmp","panelColorIndex","color","snapshotData","newColor","scope","elem","attrs","ctrl","$panelContainer","find","css","split","Number","strVal","trim","setThresholds","generateHtml","addSparklines","body","bgThresholdColor","valueThresholdColor","starterElem","html","rootElems","setTimeout","addSparkline","rootElem","width","sparkLineElem","empty","plotCanvas","plotCss","height","options","legend","lines","fill","lineWidth","yaxes","xaxis","mode","min","range","from","valueOf","max","to","grid","hoverable","borderWidth","append","plotSeries","plot","templateUrl"],"mappings":"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","file":"starter_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport './css/starter-panel.css!';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n\nconst panelDefaults = {\n  bgColor: null,\n  format: 'none',\n  thresholds: '',\n  colors: ['#299c46', 'rgba(237, 129, 40, 0.89)', '#d44a3a'],\n  colorBackground: false,\n  colorValue: false,\n  sparkline: {\n    show: true,\n    lineColor: 'rgb(31, 120, 193)',\n    fillColor: 'rgba(31, 118, 189, 0.18)',\n  },\n};\n\nexport class StarterCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // Set panel defaults for properties that the user has not set explicitly\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    // init-edit-mode event is triggered when the user clicks on edit\n    // the editor tabs are initialized in the handler\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    // The panel-teardown event is useful for cleaning up to avoid memory leaks\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n\n    // The panel initialized event can be useful for panels that inherit PanelCtrl instead of MetricsPanelCtrl\n    // With a MetricsPanelCtrl panel, you usually want to wait for some data to be received\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    // The data-received event is triggered when the datasource returns with data\n    this.events.on('data-received', this.onDataReceived.bind(this));\n\n    // The data-error event can be handled by showing a friendly error message to the user or to ignore the error\n    this.events.on('data-error', this.onDataError.bind(this));\n\n    // The data-snapshot-load event is triggered when the dashboard is loading as a snapshot\n    // Read more about saving and loading snapshot data here:\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    this.onSparklineColorChange = this.onSparklineColorChange.bind(this);\n    this.onSparklineFillChange = this.onSparklineFillChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-starter-panel/editor.html', 2);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.refresh();\n  }\n\n  onPanelTeardown() {\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    this.data = dataList.map(this.seriesHandler.bind(this));\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints || [],\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    series.value = series.stats['current'];\n    const formatFunc = kbn.valueFormats[this.panel.format];\n    series.valueFormatted = formatFunc(series.value, 0, 1);\n    return series;\n  }\n\n  setThresholds(thresholds) {\n    for (let i = 0; i < this.data.length; i++) {\n      this.data[i].thresholdColor = this.getColorForValue(this.data[i].value, thresholds);\n    }\n  }\n\n  getColorForValue(value, thresholds) {\n    if (!_.isFinite(value)) {\n      return null;\n    }\n    for (let i = thresholds.length; i > 0; i--) {\n      if (value >= thresholds[i - 1]) {\n        return this.panel.colors[i];\n      }\n    }\n    return _.first(this.panel.colors);\n  }\n\n  invertColorOrder() {\n    const tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n\n  onColorChange(panelColorIndex) {\n    return color => {\n      this.panel.colors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n  onDataError() {\n    this.onDataReceived();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  onSparklineColorChange(newColor) {\n    this.panel.sparkline.lineColor = newColor;\n    this.render();\n  }\n\n  onSparklineFillChange(newColor) {\n    this.panel.sparkline.fillColor = newColor;\n    this.render();\n  }\n\n  /*\n  The link function is an Angular function that can be used to access the HTML element for the panel\n  */\n  /* eslint class-methods-use-this: 0 */\n  link(scope, elem, attrs, ctrl) {\n    let data;\n\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n\n      if (!ctrl.data) {\n        return;\n      }\n      data = this.data;\n\n      const thresholds = this.panel.thresholds.split(',').map(strVal => {\n        return Number(strVal.trim());\n      });\n      this.setThresholds(thresholds);\n\n      generateHtml();\n\n      addSparklines();\n    });\n\n    function generateHtml() {\n      let body = '';\n\n      for (let i = 0; i < data.length; i++) {\n        const bgThresholdColor = ctrl.panel.colorBackground ? 'background-color: ' + data[i].thresholdColor : '';\n        body += `<span class=\"starter-panel-multistat\" style=\"${bgThresholdColor}\">`;\n        body += '<span class=\"starter-panel-multistat-value\">';\n        body += '<span class=\"starter-panel-multistat-value__text\">' + data[i].alias + '</span>';\n        const valueThresholdColor = ctrl.panel.colorValue ? 'color: ' + data[i].thresholdColor : '';\n        body += `<span class=\"starter-panel-multistat-value__value\" style=\"${valueThresholdColor}\">${data[i].valueFormatted}</span>`;\n        body += '</span>';\n        body += '<span class=\"starter-panel-multistat-sparkline\"></span>';\n        body += '</span>';\n      }\n      const starterElem = elem.find('.starter-panel');\n      starterElem.html(body);\n    }\n\n    function addSparklines() {\n      const rootElems = elem.find('.starter-panel-multistat');\n\n      if (rootElems.length === 0) {\n        // delay sparkline render\n        setTimeout(() => addSparklines(), 30);\n      }\n\n      for (let i = 0; i < data.length; i++) {\n        addSparkline(data[i], $(rootElems[i]));\n      }\n    }\n\n    function addSparkline(data, rootElem) {\n      const width = elem.width() + 20;\n      if (width < 30 || rootElem.length === 0) {\n        // element has not gotten it's width yet\n        return;\n      }\n      const sparkLineElem = rootElem.find('.starter-panel-multistat-sparkline');\n      sparkLineElem.empty();\n\n      const plotCanvas = $('<div></div>');\n      const plotCss = {};\n      plotCss.width = (rootElem.width() / 2) + 'px';\n      plotCss.height = (rootElem.height() - 20) + 'px';\n\n      plotCanvas.css(plotCss);\n\n      const options = {\n        legend: { show: false },\n        series: {\n          lines: {\n            show: true,\n            fill: 1,\n            lineWidth: 1,\n            fillColor: ctrl.panel.sparkline.fillColor,\n          },\n        },\n        yaxes: { show: false },\n        xaxis: {\n          show: false,\n          mode: 'time',\n          min: ctrl.range.from.valueOf(),\n          max: ctrl.range.to.valueOf(),\n        },\n        grid: { hoverable: false, show: false, borderWidth: 0 },\n      };\n\n      sparkLineElem.append(plotCanvas);\n\n      const plotSeries = {\n        data: data.flotpairs,\n        color: ctrl.panel.sparkline.lineColor,\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n  }\n}\n\nStarterCtrl.templateUrl = 'module.html';\n"]}